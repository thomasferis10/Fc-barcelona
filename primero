


#_________________________________________________________________________________________
#DEQUE

from sys import stdin

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        self.prev = None

    def setNext(self, next):
        self.next = next

    def setPrev(self, prev):
        self.prev = prev

    def setValue(self, value):
        self.value = value

    def getNext(self):
        return self.next

    def getPrev(self):
        return self.prev

    def getValue(self):
        return self.value

    def clear(self):
        self.setNext(None)
        self.setPrev(None)

    def hasVal(self, val):
        return self.value == val


class LinkedList:
    # Create
    def __init__(self):
        self.head = None
        self.len = 0

    # Is Empty
    def isEmpty(self):
        return self.head == None

    def goToTail(self):
        currentNode = self.head
        while currentNode.getNext() != None:
            currentNode = currentNode.getNext()
        return currentNode

    # Insert Values
    def insert(self, value):
        node = Node(value)
        if self.isEmpty():
            self.head = node
        else:
            tail = self.goToTail()
            tail.setNext(node)
            tail.setPrev(tail.getPrev())
        self.len += 1

    def search(self, value):
        currentNode = self.head
        while currentNode != None and not currentNode.hasVal(value):
            currentNode = currentNode.getNext()
        return currentNode

    def update(self, value, newValue):
        nodeToSearch = self.search(value)
        if nodeToSearch != None:
            nodeToSearch.setValue(newValue)

    def __len__(self):
        return self.len

    def __str__(self):
        listMembers, currentNode = [], self.head
        while currentNode is not None:
            listMembers += [currentNode.getValue()]
            currentNode = currentNode.getNext()
        return str(listMembers)

    def printList(self):
        listMembers, currentNode = [], self.head
        while currentNode is not None:
            listMembers += [currentNode.getValue()]
            currentNode = currentNode.getNext()
        print(str(listMembers))

    def delete(self, value):
        currentNode = self.head
        # Caso Vacío
        if self.isEmpty():
            return None
        # Caso primer valor solicitado
        if currentNode.hasVal(value):
            self.head = currentNode.getNext()
            return currentNode
        else:
            next = currentNode.getNext()
            while next is not None and not next.hasVal(value):
                currentNode, next = next, currentNode.getNext()
            if next:
                currentNode.setNext(next.getNext())
                next.setNext(None)
            return next


class Queue:
    def __init__(self):
        self.list = LinkedList()

    def enqueue(self, value):
        """
        Función que agrega un elemento a la cola al final de esta
        :Cualquier Tipo value:
        :return type(value):
        """
        node = Node(value)
        if self.list.isEmpty():
            self.list.head = node
        else:
            currentTail = self.list.goToTail()
            currentTail.setNext(node)

    def dequeue(self):
        """
        Función que elimina un elemento de la cola manteniendo la política FIFO
        """
        if self.list.len == 1:
            self.list.head.clear()
            self.list.len -= 1
        else:
            self.list.delete(self.list.head.getValue())

    def getHead(self):
        return self.list.head

    def printQueue(self):
        """
        Función que imprime la cola en una linea separando cada elemento por un espacio
        """
        currentNode = self.list.head
        while currentNode:
            print(currentNode.getValue(), end=' ')
            currentNode = currentNode.getNext()
        print()

    def queueToList(self):
        lista = []
        currentNode = self.list.head
        while currentNode:
            lista += [currentNode.getValue()]
            currentNode = currentNode.getNext()
        return lista

    def __len__(self):
        currentNode = self.list.head
        cant = 0
        while currentNode:
            cant += 1
            currentNode = currentNode.getNext()
        return cant


def mainQueue():
    """
    Vamos a usar como ejemplo una cola de cine en donde habrán 5 personas esperando para comprar sus boletos para
    ver Bond 25, en los primeros 10 min dos personas van a poder comprar boletos y llegan otras dos personas.
    """
    cola = Queue()
    cola.enqueue("Julián")
    cola.enqueue("Valentina")
    cola.printQueue()
    cola.dequeue()
    cola.dequeue()
    cola.printQueue()
    cola.enqueue("Miguel Ángel")
    cola.enqueue("Juan Camilo")
    cola.printQueue()


def cardsPack(cards, discards):
    if len(cards) < 2:
        return discards
    discards.enqueue(cards.getHead().getValue())
    cards.dequeue()
    aux = cards.getHead().getValue()
    cards.dequeue()
    cards.enqueue(aux)
    return cardsPack(cards, discards)


def main():
    n = stdin.readline().strip()
    while n != "0":
        cards = Queue()
        for i in range(1, int(n) + 1):
            cards.enqueue(i)
        discards = Queue()
        resp = cardsPack(cards, discards)
        print("Discarded cards: " + ", ".join(map(str, resp.queueToList())))
        print("Remaining card:", cards.getHead().getValue())
        n = stdin.readline().strip()
main()





#_________________________________________________________________________________________
#FILABLANCO

from sys import stdin


class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        self.prev = None

    def setNext(self, next):
        self.next = next

    def setPrev(self, prev):
        self.prev = prev

    def setValue(self, value):
        self.value = value

    def getNext(self):
        return self.next

    def getPrev(self):
        return self.prev

    def getValue(self):
        return self.value

    def clear(self):
        self.setNext(None)
        self.setPrev(None)

    def hasVal(self, val):
        return self.value == val



class Queue:
    def __init__(self):
        self.head = None
        self.tail = None

    def enqueue(self, value):
        """
        Función que agrega un elemento a la cola al final de esta
        :Cualquier Tipo value:
        :return type(value):
        """
        node = Node(value)
        if self.isEmpty():
            self.head = node
            self.tail = node

        else:
            self.tail.setNext(node)
            node.setPrev(self.tail)
            self.tail = node
            self.tail.setNext(None)

    def dequeue(self):
        """
        Función que elimina un elemento de la cola manteniendo la política FIFO
        """
        returnValue = self.head

        if returnValue:
            siguiente = returnValue.getNext()
            self.head = siguiente

            if not self.head:
                self.tail = None
            else:
                self.tail.setPrev(None)

        else:
            self.tail = None

        return returnValue

    def isEmpty(self):
        return self.head is None and self.tail is None


def main():
    n = stdin.readline().strip()
    for x in range(int(n)):
        fila = Queue()
        m = stdin.readline().strip()
        for y in range(int(m)):
            linea = stdin.readline().strip()
            if linea == "Siguiente":
                if fila.isEmpty():
                    print("No hay fila")
                else:
                    remove = fila.dequeue()
                    print(remove.getValue())
            else:
                fila.enqueue(linea)


main()




#_________________________________________________________________________________________
#PARENTESIS



from sys import stdin


def isCorrect(cadena):
    A = ["(", "["]
    dictA = {"(": "A", "[": "B"}
    dictC = {")": "A", "]": "B"}
    s = []
    for i in range(len(cadena)):
        if cadena[i] in A:
            s.insert(0, dictA[cadena[i]])
        elif len(s) == 0:
            return False
        else:
            if dictC[cadena[i]] == s[0]:
                s.pop(0)
            else:
                return False
    if len(s) == 0:
        return True
    return False


def main():
    n = stdin.readline().strip()
    for i in range(int(n)):
        cadena = stdin.readline().strip()
        if isCorrect(cadena):
            print("Yes")
        else:
            print("No")


main()






#_________________________________________________________________________________________
#Recuperarparentesis


from sys import stdin


class TreeNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value

    def getKey(self):
        return self.key

    def getValue(self):
        return self.value

    def setKey(self, new_key):
        if new_key is not None:
            self.key = new_key
        else:
            raise Exception('Key must not be None')

    def setValue(self, value):
        if value is not None:
            self.value = value
        else:
            raise Exception('Value must not be None')

    def __str__(self):
        return 'TreeNode' + str((self.key, self.value))


class BinTree:
    def __init__(self, pair):
        self.root = TreeNode(pair[0], pair[1]) if pair is not None else None
        # Trees on the left
        self.left = None
        # Trees on the right
        self.right = None

    def getRoot(self):
        return self.root

    def getLeft(self):
        return self.left

    def getRight(self):
        return self.right

    def setLeft(self, leftTree):
        if isinstance(leftTree, BinTree) or isinstance(leftTree, BST) or leftTree is None:
            self.left = leftTree
        else:
            raise Exception('Left Tree must be a valid BinTree')

    def setRight(self, rightTree):
        if isinstance(rightTree, BinTree) or isinstance(rightTree, BST) or rightTree is None:
            self.right = rightTree
        else:
            raise Exception('Right Tree must be a valid BinTree')

    def setRoot(self, new_root):
        self.root = new_root

    # Traversal-paths
    def inOrder(self):
        root, left, right = self.getRoot(), self.getLeft(), self.getRight()
        if root is not None:
            # Left Tree
            if left is not None:
                left.inOrder()
            # Root
            print(root.getValue())
            # right Tree
            if right is not None:
                right.inOrder()

    def preOrder(self):
        root, left, right = self.getRoot(), self.getLeft(), self.getRight()
        if root is not None:
            # Root
            print(root.getValue())
            # Left Tree
            if left is not None:
                left.preOrder()
            # right Tree
            if right is not None:
                right.preOrder()

    def posOrder(self):
        root, left, right = self.getRoot(), self.getLeft(), self.getRight()
        if root is not None:
            # Left Tree
            if left is not None:
                left.posOrder()
            # right Tree
            if right is not None:
                right.posOrder()
            # Root
            print(root.getValue())

    def inOrderArray(self, result):
        root, left, right = self.getRoot(), self.getLeft(), self.getRight()
        if root is not None:
            # Left Tree
            if left is not None:
                left.inOrderArray(result)
            # Root
            result.append(root.getValue())
            # right Tree
            if right is not None:
                right.inOrderArray(result)

    def preOrderArray(self, result):
        root, left, right = self.getRoot(), self.getLeft(), self.getRight()
        if root is not None:
            # Root
            result.append(root.getValue())
            # Left Tree
            if left is not None:
                left.preOrderArray(result)
            # right Tree
            if right is not None:
                right.preOrderArray(result)

    def posOrderArray(self, result):
        root, left, right = self.getRoot(), self.getLeft(), self.getRight()
        if root is not None:
            # Left Tree
            if left is not None:
                left.posOrderArray(result)
            # right Tree
            if right is not None:
                right.posOrderArray(result)
            # Root
            result.append(root.getValue())

    def buildTree(self, listaPre, listaIn, aux):
        if not listaPre or not listaIn:
            return aux
        pair = listaPre.pop(0)
        root = BinTree((pair, pair))
        ind_root = listaIn.index(root.getRoot().getValue())
        root.left = self.buildTree(listaPre[:ind_root + 1], listaIn[:ind_root], aux)
        root.right = self.buildTree(listaPre[ind_root:], listaIn[ind_root + 1:], aux)
        aux.append(root.getRoot().getValue())
        return aux


class BST:

    def __init__(self, value_root):
        self.tree = BinTree(value_root)

    def find(self, key):
        root, left, right = self.tree.getRoot(), self.tree.getLeft(), self.tree.getRight()
        if root is not None and root.getKey() == key:
            return root.getValue()
        elif root.getKey() < key and right is not None:
            return right.find(key)
        elif root.getKey() > key and left is not None:
            return left.find(key)
        return None

    def insert(self, pair):
        treeNode = TreeNode(pair[0], pair[1])
        self.insert_tree_node(treeNode)

    def insert_tree_node(self, new_tree_node):
        root, left, right = self.tree.getRoot(), self.tree.getLeft(), self.tree.getRight()
        if root is None:
            self.tree.setRoot(new_tree_node)
        else:
            key, value = new_tree_node.getKey(), new_tree_node.getValue()
            if root.getKey() <= key:
                # right
                if right is None:
                    self.tree.setRight(BST((key, value)))
                else:
                    right.insert_tree_node(new_tree_node)
            else:
                # left
                if left is None:
                    self.tree.setLeft(BST((key, value)))
                else:
                    left.insert_tree_node(new_tree_node)

    def __str__(self):
        preOrderA, posOrderA = [], []
        self.tree.preOrderArray(preOrderA)
        self.tree.posOrderArray(posOrderA)
        return 'BST Tree\nPRE:' + str(preOrderA) + '\nPOS:' + str(posOrderA)

    def preOrderArray(self, arr):
        return self.tree.preOrderArray(arr)

    def posOrderArray(self, arr):
        return self.tree.posOrderArray(arr)


def main():
    line = stdin.readline().strip()
    while line:
        listaPre, listaIn = map(list, line.split())
        tree = BinTree((None, None))
        realTree = tree.buildTree(listaPre, listaIn, [])
        resp = ""
        for node in realTree:
            resp += node
        print(resp)
        line = stdin.readline().strip()


main()

#_________________________________________________________________________________
